


//FILE GENERATED BY A TOOL


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;

using UHub.CoreLib.DataInterop;
using UHub.CoreLib.DataInterop.Attributes;



namespace UHub.CoreLib.Security.Authentication
{
    ///<summary>
    ///AutoGenerated DataConverters for AccountAuthData
    ///</summary>
    partial class AccountAuthData
    {

        /// <summary>
        /// Convert DataRow to AccountAuthData
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Security.Authentication.AccountAuthData(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new AccountAuthData();
            obj.UserID = row.Field<System.Int64>("UserID");
            obj.PswdHash = row.Field<System.String>("PswdHash");
            obj.Salt = row.Field<System.String>("Salt");
            obj.PswdCreatedDate = row.Field<System.DateTimeOffset>("PswdCreatedDate");
            obj.PswdModifiedDate = row.Field<System.DateTimeOffset>("PswdModifiedDate");
            obj.LastLockoutDate = row.Field<System.DateTimeOffset?>("LastLockoutDate");
            obj.StartFailedPswdWindow = row.Field<System.DateTimeOffset?>("StartFailedPswdWindow");
            obj.FailedPswdAttemptCount = row.Field<System.Byte>("FailedPswdAttemptCount");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing AccountAuthData instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.UserID = row.Field<System.Int64>("UserID");
            this.PswdHash = row.Field<System.String>("PswdHash");
            this.Salt = row.Field<System.String>("Salt");
            this.PswdCreatedDate = row.Field<System.DateTimeOffset>("PswdCreatedDate");
            this.PswdModifiedDate = row.Field<System.DateTimeOffset>("PswdModifiedDate");
            this.LastLockoutDate = row.Field<System.DateTimeOffset?>("LastLockoutDate");
            this.StartFailedPswdWindow = row.Field<System.DateTimeOffset?>("StartFailedPswdWindow");
            this.FailedPswdAttemptCount = row.Field<System.Byte>("FailedPswdAttemptCount");
        }





        ///<summary>
        ///Convert SqlDataReader to AccountAuthData
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Security.Authentication.AccountAuthData(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new AccountAuthData();

            obj.UserID = (System.Int64)reader["UserID"];
            obj.PswdHash = reader["PswdHash"] as System.String;
            obj.Salt = reader["Salt"] as System.String;
            obj.PswdCreatedDate = (System.DateTimeOffset)reader["PswdCreatedDate"];
            obj.PswdModifiedDate = (System.DateTimeOffset)reader["PswdModifiedDate"];
            if (reader["LastLockoutDate"] != DBNull.Value)
            {
                obj.LastLockoutDate = (System.DateTimeOffset)reader["LastLockoutDate"];
            }
            else
            {
                obj.LastLockoutDate = null;
            }
            if (reader["StartFailedPswdWindow"] != DBNull.Value)
            {
                obj.StartFailedPswdWindow = (System.DateTimeOffset)reader["StartFailedPswdWindow"];
            }
            else
            {
                obj.StartFailedPswdWindow = null;
            }
            obj.FailedPswdAttemptCount = (System.Byte)reader["FailedPswdAttemptCount"]; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing AccountAuthData instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.UserID = (System.Int64)reader["UserID"];
            this.PswdHash = reader["PswdHash"] as System.String;
            this.Salt = reader["Salt"] as System.String;
            this.PswdCreatedDate = (System.DateTimeOffset)reader["PswdCreatedDate"];
            this.PswdModifiedDate = (System.DateTimeOffset)reader["PswdModifiedDate"];
            if (reader["LastLockoutDate"] != DBNull.Value)
            {
                this.LastLockoutDate = (System.DateTimeOffset)reader["LastLockoutDate"];
            }
            else
            {
                this.LastLockoutDate = null;
            }
            if (reader["StartFailedPswdWindow"] != DBNull.Value)
            {
                this.StartFailedPswdWindow = (System.DateTimeOffset)reader["StartFailedPswdWindow"];
            }
            else
            {
                this.StartFailedPswdWindow = null;
            }
            this.FailedPswdAttemptCount = (System.Byte)reader["FailedPswdAttemptCount"];
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for TokenValidator
    ///</summary>
    partial class TokenValidator
    {

        /// <summary>
        /// Convert DataRow to TokenValidator
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Security.Authentication.TokenValidator(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new TokenValidator();
            obj.IssueDate = row.Field<System.DateTimeOffset>("IssueDate");
            obj.MaxExpirationDate = row.Field<System.DateTimeOffset>("MaxExpirationDate");
            obj.TokenID = row.Field<System.String>("TokenID");
            obj.IsPersistent = row.Field<System.Boolean>("IsPersistent");
            obj.TokenHash = row.Field<System.String>("TokenHash");
            obj.RequestID = row.Field<System.String>("RequestID");
            obj.SessionID = row.Field<System.String>("SessionID");
            obj.IsValid = row.Field<System.Boolean>("IsValid");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing TokenValidator instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.IssueDate = row.Field<System.DateTimeOffset>("IssueDate");
            this.MaxExpirationDate = row.Field<System.DateTimeOffset>("MaxExpirationDate");
            this.TokenID = row.Field<System.String>("TokenID");
            this.IsPersistent = row.Field<System.Boolean>("IsPersistent");
            this.TokenHash = row.Field<System.String>("TokenHash");
            this.RequestID = row.Field<System.String>("RequestID");
            this.SessionID = row.Field<System.String>("SessionID");
            this.IsValid = row.Field<System.Boolean>("IsValid");
        }





        ///<summary>
        ///Convert SqlDataReader to TokenValidator
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Security.Authentication.TokenValidator(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new TokenValidator();

            obj.IssueDate = (System.DateTimeOffset)reader["IssueDate"];
            obj.MaxExpirationDate = (System.DateTimeOffset)reader["MaxExpirationDate"];
            obj.TokenID = reader["TokenID"] as System.String;
            obj.IsPersistent = (System.Boolean)reader["IsPersistent"];
            obj.TokenHash = reader["TokenHash"] as System.String;
            obj.RequestID = reader["RequestID"] as System.String;
            obj.SessionID = reader["SessionID"] as System.String;
            obj.IsValid = (System.Boolean)reader["IsValid"]; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing TokenValidator instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.IssueDate = (System.DateTimeOffset)reader["IssueDate"];
            this.MaxExpirationDate = (System.DateTimeOffset)reader["MaxExpirationDate"];
            this.TokenID = reader["TokenID"] as System.String;
            this.IsPersistent = (System.Boolean)reader["IsPersistent"];
            this.TokenHash = reader["TokenHash"] as System.String;
            this.RequestID = reader["RequestID"] as System.String;
            this.SessionID = reader["SessionID"] as System.String;
            this.IsValid = (System.Boolean)reader["IsValid"];
        }

    }

}

namespace UHub.CoreLib.Security.Accounts
{
    ///<summary>
    ///AutoGenerated DataConverters for AccountConfirmToken
    ///</summary>
    partial class AccountConfirmToken
    {

        /// <summary>
        /// Convert DataRow to AccountConfirmToken
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Security.Accounts.AccountConfirmToken(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new AccountConfirmToken();
            obj.UserID = row.Field<System.Int64>("UserID");
            obj.RefUID = row.Field<System.String>("RefUID");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ConfirmedDate = row.Field<System.DateTimeOffset?>("ConfirmedDate");
            obj.IsConfirmed = row.Field<System.Boolean>("IsConfirmed");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing AccountConfirmToken instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.UserID = row.Field<System.Int64>("UserID");
            this.RefUID = row.Field<System.String>("RefUID");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ConfirmedDate = row.Field<System.DateTimeOffset?>("ConfirmedDate");
            this.IsConfirmed = row.Field<System.Boolean>("IsConfirmed");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
        }





        ///<summary>
        ///Convert SqlDataReader to AccountConfirmToken
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Security.Accounts.AccountConfirmToken(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new AccountConfirmToken();

            obj.UserID = (System.Int64)reader["UserID"];
            obj.RefUID = reader["RefUID"] as System.String;
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ConfirmedDate"] != DBNull.Value)
            {
                obj.ConfirmedDate = (System.DateTimeOffset)reader["ConfirmedDate"];
            }
            else
            {
                obj.ConfirmedDate = null;
            }
            obj.IsConfirmed = (System.Boolean)reader["IsConfirmed"];
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"]; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing AccountConfirmToken instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.UserID = (System.Int64)reader["UserID"];
            this.RefUID = reader["RefUID"] as System.String;
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ConfirmedDate"] != DBNull.Value)
            {
                this.ConfirmedDate = (System.DateTimeOffset)reader["ConfirmedDate"];
            }
            else
            {
                this.ConfirmedDate = null;
            }
            this.IsConfirmed = (System.Boolean)reader["IsConfirmed"];
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
        }

    }

}

namespace UHub.CoreLib.Entities.Users
{
    ///<summary>
    ///AutoGenerated DataConverters for User
    ///</summary>
    partial class User
    {

        /// <summary>
        /// Convert DataRow to User
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Users.User(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new User();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.IsConfirmed = row.Field<System.Boolean>("IsConfirmed");
            obj.IsApproved = row.Field<System.Boolean>("IsApproved");
            obj.Version = row.Field<System.String>("Version");
            obj.IsAdmin = row.Field<System.Boolean>("IsAdmin");
            obj.Email = row.Field<System.String>("Email");
            obj.Username = row.Field<System.String>("Username");
            obj.Name = row.Field<System.String>("Name");
            obj.PhoneNumber = row.Field<System.String>("PhoneNumber");
            obj.Major = row.Field<System.String>("Major");
            obj.Year = row.Field<System.String>("Year");
            obj.ExpectedGradDate = row.Field<System.String>("ExpectedGradDate");
            obj.Company = row.Field<System.String>("Company");
            obj.JobTitle = row.Field<System.String>("JobTitle");
            obj.IsFinished = row.Field<System.Boolean>("IsFinished");
            obj.SchoolID = row.Field<System.Int64?>("ParentID");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing User instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.IsConfirmed = row.Field<System.Boolean>("IsConfirmed");
            this.IsApproved = row.Field<System.Boolean>("IsApproved");
            this.Version = row.Field<System.String>("Version");
            this.IsAdmin = row.Field<System.Boolean>("IsAdmin");
            this.Email = row.Field<System.String>("Email");
            this.Username = row.Field<System.String>("Username");
            this.Name = row.Field<System.String>("Name");
            this.PhoneNumber = row.Field<System.String>("PhoneNumber");
            this.Major = row.Field<System.String>("Major");
            this.Year = row.Field<System.String>("Year");
            this.ExpectedGradDate = row.Field<System.String>("ExpectedGradDate");
            this.Company = row.Field<System.String>("Company");
            this.JobTitle = row.Field<System.String>("JobTitle");
            this.IsFinished = row.Field<System.Boolean>("IsFinished");
            this.SchoolID = row.Field<System.Int64?>("ParentID");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to User
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Users.User(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new User();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.IsConfirmed = (System.Boolean)reader["IsConfirmed"];
            obj.IsApproved = (System.Boolean)reader["IsApproved"];
            obj.Version = reader["Version"] as System.String;
            obj.IsAdmin = (System.Boolean)reader["IsAdmin"];
            obj.Email = reader["Email"] as System.String;
            obj.Username = reader["Username"] as System.String;
            obj.Name = reader["Name"] as System.String;
            obj.PhoneNumber = reader["PhoneNumber"] as System.String;
            obj.Major = reader["Major"] as System.String;
            obj.Year = reader["Year"] as System.String;
            obj.ExpectedGradDate = reader["ExpectedGradDate"] as System.String;
            obj.Company = reader["Company"] as System.String;
            obj.JobTitle = reader["JobTitle"] as System.String;
            obj.IsFinished = (System.Boolean)reader["IsFinished"];
            if (reader["ParentID"] != DBNull.Value)
            {
                obj.SchoolID = (System.Int64)reader["ParentID"];
            }
            else
            {
                obj.SchoolID = null;
            }
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing User instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.IsConfirmed = (System.Boolean)reader["IsConfirmed"];
            this.IsApproved = (System.Boolean)reader["IsApproved"];
            this.Version = reader["Version"] as System.String;
            this.IsAdmin = (System.Boolean)reader["IsAdmin"];
            this.Email = reader["Email"] as System.String;
            this.Username = reader["Username"] as System.String;
            this.Name = reader["Name"] as System.String;
            this.PhoneNumber = reader["PhoneNumber"] as System.String;
            this.Major = reader["Major"] as System.String;
            this.Year = reader["Year"] as System.String;
            this.ExpectedGradDate = reader["ExpectedGradDate"] as System.String;
            this.Company = reader["Company"] as System.String;
            this.JobTitle = reader["JobTitle"] as System.String;
            this.IsFinished = (System.Boolean)reader["IsFinished"];
            if (reader["ParentID"] != DBNull.Value)
            {
                this.SchoolID = (System.Int64)reader["ParentID"];
            }
            else
            {
                this.SchoolID = null;
            }
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for UserRecoveryContext
    ///</summary>
    partial class UserRecoveryContext
    {

        /// <summary>
        /// Convert DataRow to UserRecoveryContext
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Users.UserRecoveryContext(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new UserRecoveryContext();
            obj.UserID = row.Field<System.Int64>("UserID");
            obj.RecoveryID = row.Field<System.String>("RecoveryID");
            obj.RecoveryKey = row.Field<System.String>("RecoveryKey");
            obj.EffFromDate = row.Field<System.DateTimeOffset>("EffFromDate");
            obj.EffToDate = row.Field<System.DateTimeOffset>("EffToDate");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.AttemptCount = row.Field<System.Byte>("AttemptCount");
            obj.IsOptional = row.Field<System.Boolean>("IsOptional");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing UserRecoveryContext instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.UserID = row.Field<System.Int64>("UserID");
            this.RecoveryID = row.Field<System.String>("RecoveryID");
            this.RecoveryKey = row.Field<System.String>("RecoveryKey");
            this.EffFromDate = row.Field<System.DateTimeOffset>("EffFromDate");
            this.EffToDate = row.Field<System.DateTimeOffset>("EffToDate");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.AttemptCount = row.Field<System.Byte>("AttemptCount");
            this.IsOptional = row.Field<System.Boolean>("IsOptional");
        }





        ///<summary>
        ///Convert SqlDataReader to UserRecoveryContext
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Users.UserRecoveryContext(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new UserRecoveryContext();

            obj.UserID = (System.Int64)reader["UserID"];
            obj.RecoveryID = reader["RecoveryID"] as System.String;
            obj.RecoveryKey = reader["RecoveryKey"] as System.String;
            obj.EffFromDate = (System.DateTimeOffset)reader["EffFromDate"];
            obj.EffToDate = (System.DateTimeOffset)reader["EffToDate"];
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.AttemptCount = (System.Byte)reader["AttemptCount"];
            obj.IsOptional = (System.Boolean)reader["IsOptional"]; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing UserRecoveryContext instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.UserID = (System.Int64)reader["UserID"];
            this.RecoveryID = reader["RecoveryID"] as System.String;
            this.RecoveryKey = reader["RecoveryKey"] as System.String;
            this.EffFromDate = (System.DateTimeOffset)reader["EffFromDate"];
            this.EffToDate = (System.DateTimeOffset)reader["EffToDate"];
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.AttemptCount = (System.Byte)reader["AttemptCount"];
            this.IsOptional = (System.Boolean)reader["IsOptional"];
        }

    }

}

namespace UHub.CoreLib.Entities.Schools
{
    ///<summary>
    ///AutoGenerated DataConverters for School
    ///</summary>
    partial class School
    {

        /// <summary>
        /// Convert DataRow to School
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Schools.School(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new School();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.Name = row.Field<System.String>("Name");
            obj.State = row.Field<System.String>("State");
            obj.City = row.Field<System.String>("City");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.Description = row.Field<System.String>("Description");
            obj.DomainValidator = row.Field<System.String>("DomainValidator");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing School instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.Name = row.Field<System.String>("Name");
            this.State = row.Field<System.String>("State");
            this.City = row.Field<System.String>("City");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.Description = row.Field<System.String>("Description");
            this.DomainValidator = row.Field<System.String>("DomainValidator");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to School
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Schools.School(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new School();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.Name = reader["Name"] as System.String;
            obj.State = reader["State"] as System.String;
            obj.City = reader["City"] as System.String;
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.Description = reader["Description"] as System.String;
            obj.DomainValidator = reader["DomainValidator"] as System.String;
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing School instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.Name = reader["Name"] as System.String;
            this.State = reader["State"] as System.String;
            this.City = reader["City"] as System.String;
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.Description = reader["Description"] as System.String;
            this.DomainValidator = reader["DomainValidator"] as System.String;
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

namespace UHub.CoreLib.Entities.SchoolMajors
{
    ///<summary>
    ///AutoGenerated DataConverters for SchoolMajor
    ///</summary>
    partial class SchoolMajor
    {

        /// <summary>
        /// Convert DataRow to SchoolMajor
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.SchoolMajors.SchoolMajor(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new SchoolMajor();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.Name = row.Field<System.String>("Name");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadonly = row.Field<System.Boolean>("IsReadonly");
            obj.Description = row.Field<System.String>("Description");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing SchoolMajor instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.Name = row.Field<System.String>("Name");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadonly = row.Field<System.Boolean>("IsReadonly");
            this.Description = row.Field<System.String>("Description");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to SchoolMajor
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.SchoolMajors.SchoolMajor(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new SchoolMajor();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.Name = reader["Name"] as System.String;
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadonly = (System.Boolean)reader["IsReadonly"];
            obj.Description = reader["Description"] as System.String;
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing SchoolMajor instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.Name = reader["Name"] as System.String;
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadonly = (System.Boolean)reader["IsReadonly"];
            this.Description = reader["Description"] as System.String;
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

namespace UHub.CoreLib.Entities.SchoolClubs
{
    ///<summary>
    ///AutoGenerated DataConverters for SchoolClub
    ///</summary>
    partial class SchoolClub
    {

        /// <summary>
        /// Convert DataRow to SchoolClub
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.SchoolClubs.SchoolClub(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new SchoolClub();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.Name = row.Field<System.String>("Name");
            obj.Description = row.Field<System.String>("Description");
            obj.SchoolID = row.Field<System.Int64>("ParentID");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing SchoolClub instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.Name = row.Field<System.String>("Name");
            this.Description = row.Field<System.String>("Description");
            this.SchoolID = row.Field<System.Int64>("ParentID");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to SchoolClub
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.SchoolClubs.SchoolClub(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new SchoolClub();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.Name = reader["Name"] as System.String;
            obj.Description = reader["Description"] as System.String;
            obj.SchoolID = (System.Int64)reader["ParentID"];
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing SchoolClub instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.Name = reader["Name"] as System.String;
            this.Description = reader["Description"] as System.String;
            this.SchoolID = (System.Int64)reader["ParentID"];
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

namespace UHub.CoreLib.Entities.Posts
{
    ///<summary>
    ///AutoGenerated DataConverters for Post
    ///</summary>
    partial class Post
    {

        /// <summary>
        /// Convert DataRow to Post
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Posts.Post(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new Post();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.Name = row.Field<System.String>("Name");
            obj.Content = row.Field<System.String>("Content");
            obj.IsModified = row.Field<System.Boolean>("IsModified");
            obj.ViewCount = row.Field<System.Int64>("ViewCount");
            obj.IsLocked = row.Field<System.Boolean>("IsLocked");
            obj.CanComment = row.Field<System.Boolean>("CanComment");
            obj.IsPublic = row.Field<System.Boolean>("IsPublic");
            obj.ParentID = row.Field<System.Int64>("ParentID");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing Post instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.Name = row.Field<System.String>("Name");
            this.Content = row.Field<System.String>("Content");
            this.IsModified = row.Field<System.Boolean>("IsModified");
            this.ViewCount = row.Field<System.Int64>("ViewCount");
            this.IsLocked = row.Field<System.Boolean>("IsLocked");
            this.CanComment = row.Field<System.Boolean>("CanComment");
            this.IsPublic = row.Field<System.Boolean>("IsPublic");
            this.ParentID = row.Field<System.Int64>("ParentID");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to Post
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Posts.Post(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new Post();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.Name = reader["Name"] as System.String;
            obj.Content = reader["Content"] as System.String;
            obj.IsModified = (System.Boolean)reader["IsModified"];
            obj.ViewCount = (System.Int64)reader["ViewCount"];
            obj.IsLocked = (System.Boolean)reader["IsLocked"];
            obj.CanComment = (System.Boolean)reader["CanComment"];
            obj.IsPublic = (System.Boolean)reader["IsPublic"];
            obj.ParentID = (System.Int64)reader["ParentID"];
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing Post instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.Name = reader["Name"] as System.String;
            this.Content = reader["Content"] as System.String;
            this.IsModified = (System.Boolean)reader["IsModified"];
            this.ViewCount = (System.Int64)reader["ViewCount"];
            this.IsLocked = (System.Boolean)reader["IsLocked"];
            this.CanComment = (System.Boolean)reader["CanComment"];
            this.IsPublic = (System.Boolean)reader["IsPublic"];
            this.ParentID = (System.Int64)reader["ParentID"];
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for PostClusteredCount
    ///</summary>
    partial class PostClusteredCount
    {

        /// <summary>
        /// Convert DataRow to PostClusteredCount
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Posts.PostClusteredCount(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new PostClusteredCount();
            obj.SchoolID = row.Field<System.Int64>("SchoolID");
            obj.SchoolClubID = row.Field<System.Int64?>("SchoolClubID");
            obj.PublicPostCount = row.Field<System.Int64>("PublicPostCount");
            obj.PrivatePostCount = row.Field<System.Int64>("PrivatePostCount");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing PostClusteredCount instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.SchoolID = row.Field<System.Int64>("SchoolID");
            this.SchoolClubID = row.Field<System.Int64?>("SchoolClubID");
            this.PublicPostCount = row.Field<System.Int64>("PublicPostCount");
            this.PrivatePostCount = row.Field<System.Int64>("PrivatePostCount");
        }





        ///<summary>
        ///Convert SqlDataReader to PostClusteredCount
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Posts.PostClusteredCount(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new PostClusteredCount();

            obj.SchoolID = (System.Int64)reader["SchoolID"];
            if (reader["SchoolClubID"] != DBNull.Value)
            {
                obj.SchoolClubID = (System.Int64)reader["SchoolClubID"];
            }
            else
            {
                obj.SchoolClubID = null;
            }
            obj.PublicPostCount = (System.Int64)reader["PublicPostCount"];
            obj.PrivatePostCount = (System.Int64)reader["PrivatePostCount"]; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing PostClusteredCount instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.SchoolID = (System.Int64)reader["SchoolID"];
            if (reader["SchoolClubID"] != DBNull.Value)
            {
                this.SchoolClubID = (System.Int64)reader["SchoolClubID"];
            }
            else
            {
                this.SchoolClubID = null;
            }
            this.PublicPostCount = (System.Int64)reader["PublicPostCount"];
            this.PrivatePostCount = (System.Int64)reader["PrivatePostCount"];
        }

    }

}

namespace UHub.CoreLib.Entities.Images
{
    ///<summary>
    ///AutoGenerated DataConverters for Image
    ///</summary>
    partial class Image
    {

        /// <summary>
        /// Convert DataRow to Image
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Images.Image(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new Image();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.Name = row.Field<System.String>("Name");
            obj.ViewCount = row.Field<System.Int64>("ViewCount");
            obj.FilePath = row.Field<System.String>("FilePath");
            obj.Description = row.Field<System.String>("Description");
            obj.FileHash_SHA256 = row.Field<System.String>("FileHash_SHA256");
            obj.SourceName = row.Field<System.String>("SourceName");
            obj.SourceType = row.Field<System.String>("SourceType");
            obj.DownloadName = row.Field<System.String>("DownloadName");
            obj.ParentID = row.Field<System.String>("ParentID");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing Image instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.Name = row.Field<System.String>("Name");
            this.ViewCount = row.Field<System.Int64>("ViewCount");
            this.FilePath = row.Field<System.String>("FilePath");
            this.Description = row.Field<System.String>("Description");
            this.FileHash_SHA256 = row.Field<System.String>("FileHash_SHA256");
            this.SourceName = row.Field<System.String>("SourceName");
            this.SourceType = row.Field<System.String>("SourceType");
            this.DownloadName = row.Field<System.String>("DownloadName");
            this.ParentID = row.Field<System.String>("ParentID");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to Image
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Images.Image(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new Image();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.Name = reader["Name"] as System.String;
            obj.ViewCount = (System.Int64)reader["ViewCount"];
            obj.FilePath = reader["FilePath"] as System.String;
            obj.Description = reader["Description"] as System.String;
            obj.FileHash_SHA256 = reader["FileHash_SHA256"] as System.String;
            obj.SourceName = reader["SourceName"] as System.String;
            obj.SourceType = reader["SourceType"] as System.String;
            obj.DownloadName = reader["DownloadName"] as System.String;
            obj.ParentID = reader["ParentID"] as System.String;
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing Image instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.Name = reader["Name"] as System.String;
            this.ViewCount = (System.Int64)reader["ViewCount"];
            this.FilePath = reader["FilePath"] as System.String;
            this.Description = reader["Description"] as System.String;
            this.FileHash_SHA256 = reader["FileHash_SHA256"] as System.String;
            this.SourceName = reader["SourceName"] as System.String;
            this.SourceType = reader["SourceType"] as System.String;
            this.DownloadName = reader["DownloadName"] as System.String;
            this.ParentID = reader["ParentID"] as System.String;
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

namespace UHub.CoreLib.Entities.Files
{
    ///<summary>
    ///AutoGenerated DataConverters for File
    ///</summary>
    partial class File
    {

        /// <summary>
        /// Convert DataRow to File
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Files.File(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new File();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.Name = row.Field<System.String>("Name");
            obj.ViewCount = row.Field<System.Int64>("ViewCount");
            obj.FilePath = row.Field<System.String>("FilePath");
            obj.Description = row.Field<System.String>("Description");
            obj.FileHash_SHA256 = row.Field<System.String>("FileHash_SHA256");
            obj.SourceName = row.Field<System.String>("SourceName");
            obj.SourceType = row.Field<System.String>("SourceType");
            obj.DownloadName = row.Field<System.String>("DownloadName");
            obj.ParentID = row.Field<System.String>("ParentID");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing File instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.Name = row.Field<System.String>("Name");
            this.ViewCount = row.Field<System.Int64>("ViewCount");
            this.FilePath = row.Field<System.String>("FilePath");
            this.Description = row.Field<System.String>("Description");
            this.FileHash_SHA256 = row.Field<System.String>("FileHash_SHA256");
            this.SourceName = row.Field<System.String>("SourceName");
            this.SourceType = row.Field<System.String>("SourceType");
            this.DownloadName = row.Field<System.String>("DownloadName");
            this.ParentID = row.Field<System.String>("ParentID");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to File
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Files.File(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new File();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.Name = reader["Name"] as System.String;
            obj.ViewCount = (System.Int64)reader["ViewCount"];
            obj.FilePath = reader["FilePath"] as System.String;
            obj.Description = reader["Description"] as System.String;
            obj.FileHash_SHA256 = reader["FileHash_SHA256"] as System.String;
            obj.SourceName = reader["SourceName"] as System.String;
            obj.SourceType = reader["SourceType"] as System.String;
            obj.DownloadName = reader["DownloadName"] as System.String;
            obj.ParentID = reader["ParentID"] as System.String;
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing File instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.Name = reader["Name"] as System.String;
            this.ViewCount = (System.Int64)reader["ViewCount"];
            this.FilePath = reader["FilePath"] as System.String;
            this.Description = reader["Description"] as System.String;
            this.FileHash_SHA256 = reader["FileHash_SHA256"] as System.String;
            this.SourceName = reader["SourceName"] as System.String;
            this.SourceType = reader["SourceType"] as System.String;
            this.DownloadName = reader["DownloadName"] as System.String;
            this.ParentID = reader["ParentID"] as System.String;
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

namespace UHub.CoreLib.Entities.Comments
{
    ///<summary>
    ///AutoGenerated DataConverters for Comment
    ///</summary>
    partial class Comment
    {

        /// <summary>
        /// Convert DataRow to Comment
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.Comments.Comment(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new Comment();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.Content = row.Field<System.String>("Content");
            obj.IsModified = row.Field<System.Boolean>("IsModified");
            obj.ViewCount = row.Field<System.Int64>("ViewCount");
            obj.ParentID = row.Field<System.Int64>("ParentID");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing Comment instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.Content = row.Field<System.String>("Content");
            this.IsModified = row.Field<System.Boolean>("IsModified");
            this.ViewCount = row.Field<System.Int64>("ViewCount");
            this.ParentID = row.Field<System.Int64>("ParentID");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to Comment
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.Comments.Comment(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new Comment();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.Content = reader["Content"] as System.String;
            obj.IsModified = (System.Boolean)reader["IsModified"];
            obj.ViewCount = (System.Int64)reader["ViewCount"];
            obj.ParentID = (System.Int64)reader["ParentID"];
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing Comment instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.Content = reader["Content"] as System.String;
            this.IsModified = (System.Boolean)reader["IsModified"];
            this.ViewCount = (System.Int64)reader["ViewCount"];
            this.ParentID = (System.Int64)reader["ParentID"];
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

namespace UHub.CoreLib.Entities.ClubModerators
{
    ///<summary>
    ///AutoGenerated DataConverters for ClubModerator
    ///</summary>
    partial class ClubModerator
    {

        /// <summary>
        /// Convert DataRow to ClubModerator
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.Entities.ClubModerators.ClubModerator(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new ClubModerator();
            obj.ID = row.Field<System.Int64?>("ID");
            obj.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            obj.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            obj.UserID = row.Field<System.Int64>("UserID");
            obj.IsOwner = row.Field<System.Boolean>("IsOwner");
            obj.IsValid = row.Field<System.Boolean>("IsValid");
            obj.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            obj.CreatedBy = row.Field<System.Int64>("CreatedBy");
            obj.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            obj.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            obj.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing ClubModerator instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int64?>("ID");
            this.IsEnabled = row.Field<System.Boolean>("IsEnabled");
            this.IsReadOnly = row.Field<System.Boolean>("IsReadOnly");
            this.UserID = row.Field<System.Int64>("UserID");
            this.IsOwner = row.Field<System.Boolean>("IsOwner");
            this.IsValid = row.Field<System.Boolean>("IsValid");
            this.IsDeleted = row.Field<System.Boolean>("IsDeleted");
            this.CreatedBy = row.Field<System.Int64>("CreatedBy");
            this.CreatedDate = row.Field<System.DateTimeOffset>("CreatedDate");
            this.ModifiedBy = row.Field<System.Int64?>("ModifiedBy");
            this.ModifiedDate = row.Field<System.DateTimeOffset?>("ModifiedDate");
        }





        ///<summary>
        ///Convert SqlDataReader to ClubModerator
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.Entities.ClubModerators.ClubModerator(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new ClubModerator();

            if (reader["ID"] != DBNull.Value)
            {
                obj.ID = (System.Int64)reader["ID"];
            }
            else
            {
                obj.ID = null;
            }
            obj.IsEnabled = (System.Boolean)reader["IsEnabled"];
            obj.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            obj.UserID = (System.Int64)reader["UserID"];
            obj.IsOwner = (System.Boolean)reader["IsOwner"];
            obj.IsValid = (System.Boolean)reader["IsValid"];
            obj.IsDeleted = (System.Boolean)reader["IsDeleted"];
            obj.CreatedBy = (System.Int64)reader["CreatedBy"];
            obj.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                obj.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                obj.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                obj.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                obj.ModifiedDate = null;
            }
            return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing ClubModerator instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            if (reader["ID"] != DBNull.Value)
            {
                this.ID = (System.Int64)reader["ID"];
            }
            else
            {
                this.ID = null;
            }
            this.IsEnabled = (System.Boolean)reader["IsEnabled"];
            this.IsReadOnly = (System.Boolean)reader["IsReadOnly"];
            this.UserID = (System.Int64)reader["UserID"];
            this.IsOwner = (System.Boolean)reader["IsOwner"];
            this.IsValid = (System.Boolean)reader["IsValid"];
            this.IsDeleted = (System.Boolean)reader["IsDeleted"];
            this.CreatedBy = (System.Int64)reader["CreatedBy"];
            this.CreatedDate = (System.DateTimeOffset)reader["CreatedDate"];
            if (reader["ModifiedBy"] != DBNull.Value)
            {
                this.ModifiedBy = (System.Int64)reader["ModifiedBy"];
            }
            else
            {
                this.ModifiedBy = null;
            }
            if (reader["ModifiedDate"] != DBNull.Value)
            {
                this.ModifiedDate = (System.DateTimeOffset)reader["ModifiedDate"];
            }
            else
            {
                this.ModifiedDate = null;
            }
        }

    }

}

