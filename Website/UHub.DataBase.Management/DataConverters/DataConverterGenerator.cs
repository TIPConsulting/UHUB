





//FILE GENERATED BY A TOOL


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;


using UHub.CoreLib.DataInterop;
using UHub.CoreLib.DataInterop.Attributes;



namespace UHub.Database.Management
{
    ///<summary>
    ///AutoGenerated DataConverters for EntTypeBreakoutXRef
    ///</summary>
    partial class EntTypeBreakoutXRef
    {

        /// <summary>
        /// Convert DataRow to EntTypeBreakoutXRef
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntTypeBreakoutXRef(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntTypeBreakoutXRef();
            obj.EntTypeID = row.Field<System.Int16>("EntTypeID");
            obj.TableSchema = row.Field<System.String>("TableSchema");
            obj.TableName = row.Field<System.String>("TableName");
            obj.JoinType = row.Field<System.String>("JoinType");
            obj.OverrideComparer = row.Field<System.String>("OverrideComparer");
            obj.ColumnWhiteList = row.Field<System.String>("ColumnWhiteList");
            obj.ColumnBlackList = row.Field<System.String>("ColumnBlackList");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntTypeBreakoutXRef instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.EntTypeID = row.Field<System.Int16>("EntTypeID");
            this.TableSchema = row.Field<System.String>("TableSchema");
            this.TableName = row.Field<System.String>("TableName");
            this.JoinType = row.Field<System.String>("JoinType");
            this.OverrideComparer = row.Field<System.String>("OverrideComparer");
            this.ColumnWhiteList = row.Field<System.String>("ColumnWhiteList");
            this.ColumnBlackList = row.Field<System.String>("ColumnBlackList");
        }





        ///<summary>
        ///Convert SqlDataReader to EntTypeBreakoutXRef
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntTypeBreakoutXRef(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntTypeBreakoutXRef();

            obj.EntTypeID = (System.Int16)reader["EntTypeID"];
            obj.TableSchema = reader["TableSchema"] as System.String;
            obj.TableName = reader["TableName"] as System.String;
            obj.JoinType = reader["JoinType"] as System.String;
            obj.OverrideComparer = reader["OverrideComparer"] as System.String;
            obj.ColumnWhiteList = reader["ColumnWhiteList"] as System.String;
            obj.ColumnBlackList = reader["ColumnBlackList"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntTypeBreakoutXRef instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.EntTypeID = (System.Int16)reader["EntTypeID"];
            this.TableSchema = reader["TableSchema"] as System.String;
            this.TableName = reader["TableName"] as System.String;
            this.JoinType = reader["JoinType"] as System.String;
            this.OverrideComparer = reader["OverrideComparer"] as System.String;
            this.ColumnWhiteList = reader["ColumnWhiteList"] as System.String;
            this.ColumnBlackList = reader["ColumnBlackList"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for EntChildMap
    ///</summary>
    partial class EntChildMap
    {

        /// <summary>
        /// Convert DataRow to EntChildMap
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntChildMap(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntChildMap();
            obj.ParentEntType = row.Field<System.Int16>("ParentEntType");
            obj.ChildEntType = row.Field<System.Int16>("ChildEntType");
            obj.Description = row.Field<System.String>("Description");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntChildMap instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ParentEntType = row.Field<System.Int16>("ParentEntType");
            this.ChildEntType = row.Field<System.Int16>("ChildEntType");
            this.Description = row.Field<System.String>("Description");
        }





        ///<summary>
        ///Convert SqlDataReader to EntChildMap
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntChildMap(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntChildMap();

            obj.ParentEntType = (System.Int16)reader["ParentEntType"];
            obj.ChildEntType = (System.Int16)reader["ChildEntType"];
            obj.Description = reader["Description"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntChildMap instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.ParentEntType = (System.Int16)reader["ParentEntType"];
            this.ChildEntType = (System.Int16)reader["ChildEntType"];
            this.Description = reader["Description"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for EntDataType
    ///</summary>
    partial class EntDataType
    {

        /// <summary>
        /// Convert DataRow to EntDataType
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntDataType(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntDataType();
            obj.ID = row.Field<System.Int16>("ID");
            obj.Name = row.Field<System.String>("Name");
            obj.DefaultLength = row.Field<System.Int32?>("DefaultLength");
            obj.DefaultPrecision = row.Field<System.String>("DefaultPrecision");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntDataType instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int16>("ID");
            this.Name = row.Field<System.String>("Name");
            this.DefaultLength = row.Field<System.Int32?>("DefaultLength");
            this.DefaultPrecision = row.Field<System.String>("DefaultPrecision");
        }





        ///<summary>
        ///Convert SqlDataReader to EntDataType
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntDataType(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntDataType();

            obj.ID = (System.Int16)reader["ID"];
            obj.Name = reader["Name"] as System.String;
            if (reader["DefaultLength"] != DBNull.Value)
            {
                obj.DefaultLength = (System.Int32)reader["DefaultLength"];
            }
            else
            {
                obj.DefaultLength = null;
            }
            obj.DefaultPrecision = reader["DefaultPrecision"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntDataType instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.ID = (System.Int16)reader["ID"];
            this.Name = reader["Name"] as System.String;
            if (reader["DefaultLength"] != DBNull.Value)
            {
                this.DefaultLength = (System.Int32)reader["DefaultLength"];
            }
            else
            {
                this.DefaultLength = null;
            }
            this.DefaultPrecision = reader["DefaultPrecision"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for EntType
    ///</summary>
    partial class EntType
    {

        /// <summary>
        /// Convert DataRow to EntType
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntType(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntType();
            obj.ID = row.Field<System.Int16>("ID");
            obj.UID = row.Field<System.Guid>("UID");
            obj.Name = row.Field<System.String>("Name");
            obj.Description = row.Field<System.String>("Description");
            obj.AutoViewSchema = row.Field<System.String>("AutoViewSchema");
            obj.AutoViewName = row.Field<System.String>("AutoViewName");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntType instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int16>("ID");
            this.UID = row.Field<System.Guid>("UID");
            this.Name = row.Field<System.String>("Name");
            this.Description = row.Field<System.String>("Description");
            this.AutoViewSchema = row.Field<System.String>("AutoViewSchema");
            this.AutoViewName = row.Field<System.String>("AutoViewName");
        }





        ///<summary>
        ///Convert SqlDataReader to EntType
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntType(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntType();

            obj.ID = (System.Int16)reader["ID"];
            obj.UID = (System.Guid)reader["UID"];
            obj.Name = reader["Name"] as System.String;
            obj.Description = reader["Description"] as System.String;
            obj.AutoViewSchema = reader["AutoViewSchema"] as System.String;
            obj.AutoViewName = reader["AutoViewName"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntType instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.ID = (System.Int16)reader["ID"];
            this.UID = (System.Guid)reader["UID"];
            this.Name = reader["Name"] as System.String;
            this.Description = reader["Description"] as System.String;
            this.AutoViewSchema = reader["AutoViewSchema"] as System.String;
            this.AutoViewName = reader["AutoViewName"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for EntProperty
    ///</summary>
    partial class EntProperty
    {

        /// <summary>
        /// Convert DataRow to EntProperty
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntProperty(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntProperty();
            obj.ID = row.Field<System.Int32>("ID");
            obj.PropName = row.Field<System.String>("PropName");
            obj.PropFriendlyName = row.Field<System.String>("PropFriendlyName");
            obj.Description = row.Field<System.String>("Description");
            obj.DataTypeID = row.Field<System.Int16>("DataTypeID");
            obj.DataType = row.Field<System.String>("DataType");
            obj.DefaultLength = row.Field<System.Int32?>("DefaultLength");
            obj.DefaultPrecision = row.Field<System.String>("DefaultPrecision");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntProperty instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.ID = row.Field<System.Int32>("ID");
            this.PropName = row.Field<System.String>("PropName");
            this.PropFriendlyName = row.Field<System.String>("PropFriendlyName");
            this.Description = row.Field<System.String>("Description");
            this.DataTypeID = row.Field<System.Int16>("DataTypeID");
            this.DataType = row.Field<System.String>("DataType");
            this.DefaultLength = row.Field<System.Int32?>("DefaultLength");
            this.DefaultPrecision = row.Field<System.String>("DefaultPrecision");
        }





        ///<summary>
        ///Convert SqlDataReader to EntProperty
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntProperty(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntProperty();

            obj.ID = (System.Int32)reader["ID"];
            obj.PropName = reader["PropName"] as System.String;
            obj.PropFriendlyName = reader["PropFriendlyName"] as System.String;
            obj.Description = reader["Description"] as System.String;
            obj.DataTypeID = (System.Int16)reader["DataTypeID"];
            obj.DataType = reader["DataType"] as System.String;
            if (reader["DefaultLength"] != DBNull.Value)
            {
                obj.DefaultLength = (System.Int32)reader["DefaultLength"];
            }
            else
            {
                obj.DefaultLength = null;
            }
            obj.DefaultPrecision = reader["DefaultPrecision"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntProperty instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.ID = (System.Int32)reader["ID"];
            this.PropName = reader["PropName"] as System.String;
            this.PropFriendlyName = reader["PropFriendlyName"] as System.String;
            this.Description = reader["Description"] as System.String;
            this.DataTypeID = (System.Int16)reader["DataTypeID"];
            this.DataType = reader["DataType"] as System.String;
            if (reader["DefaultLength"] != DBNull.Value)
            {
                this.DefaultLength = (System.Int32)reader["DefaultLength"];
            }
            else
            {
                this.DefaultLength = null;
            }
            this.DefaultPrecision = reader["DefaultPrecision"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for EntPropertyMap
    ///</summary>
    partial class EntPropertyMap
    {

        /// <summary>
        /// Convert DataRow to EntPropertyMap
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntPropertyMap(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntPropertyMap();
            obj.EntTypeID = row.Field<System.Int16>("EntTypeID");
            obj.PropID = row.Field<System.Int32>("PropID");
            obj.DataTypeID = row.Field<System.Int16>("DataTypeID");
            obj.OverrideLength = row.Field<System.Int32?>("OverrideLength");
            obj.OverridePrecision = row.Field<System.String>("OverridePrecision");
            obj.IsNullable = row.Field<System.Boolean>("IsNullable");
            obj.DefaultValue = row.Field<System.String>("DefaultValue");
            obj.Description = row.Field<System.String>("Description");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntPropertyMap instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.EntTypeID = row.Field<System.Int16>("EntTypeID");
            this.PropID = row.Field<System.Int32>("PropID");
            this.DataTypeID = row.Field<System.Int16>("DataTypeID");
            this.OverrideLength = row.Field<System.Int32?>("OverrideLength");
            this.OverridePrecision = row.Field<System.String>("OverridePrecision");
            this.IsNullable = row.Field<System.Boolean>("IsNullable");
            this.DefaultValue = row.Field<System.String>("DefaultValue");
            this.Description = row.Field<System.String>("Description");
        }





        ///<summary>
        ///Convert SqlDataReader to EntPropertyMap
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntPropertyMap(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntPropertyMap();

            obj.EntTypeID = (System.Int16)reader["EntTypeID"];
            obj.PropID = (System.Int32)reader["PropID"];
            obj.DataTypeID = (System.Int16)reader["DataTypeID"];
            if (reader["OverrideLength"] != DBNull.Value)
            {
                obj.OverrideLength = (System.Int32)reader["OverrideLength"];
            }
            else
            {
                obj.OverrideLength = null;
            }
            obj.OverridePrecision = reader["OverridePrecision"] as System.String;
            obj.IsNullable = (System.Boolean)reader["IsNullable"];
            obj.DefaultValue = reader["DefaultValue"] as System.String;
            obj.Description = reader["Description"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntPropertyMap instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.EntTypeID = (System.Int16)reader["EntTypeID"];
            this.PropID = (System.Int32)reader["PropID"];
            this.DataTypeID = (System.Int16)reader["DataTypeID"];
            if (reader["OverrideLength"] != DBNull.Value)
            {
                this.OverrideLength = (System.Int32)reader["OverrideLength"];
            }
            else
            {
                this.OverrideLength = null;
            }
            this.OverridePrecision = reader["OverridePrecision"] as System.String;
            this.IsNullable = (System.Boolean)reader["IsNullable"];
            this.DefaultValue = reader["DefaultValue"] as System.String;
            this.Description = reader["Description"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for EntPropertyRevisionMap
    ///</summary>
    partial class EntPropertyRevisionMap
    {

        /// <summary>
        /// Convert DataRow to EntPropertyRevisionMap
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.Database.Management.EntPropertyRevisionMap(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new EntPropertyRevisionMap();
            obj.EntTypeID = row.Field<System.Int16>("EntTypeID");
            obj.PropID = row.Field<System.Int32>("PropID");
            obj.Description = row.Field<System.String>("Description");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing EntPropertyRevisionMap instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.EntTypeID = row.Field<System.Int16>("EntTypeID");
            this.PropID = row.Field<System.Int32>("PropID");
            this.Description = row.Field<System.String>("Description");
        }





        ///<summary>
        ///Convert SqlDataReader to EntPropertyRevisionMap
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.Database.Management.EntPropertyRevisionMap(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new EntPropertyRevisionMap();

            obj.EntTypeID = (System.Int16)reader["EntTypeID"];
            obj.PropID = (System.Int32)reader["PropID"];
            obj.Description = reader["Description"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing EntPropertyRevisionMap instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.EntTypeID = (System.Int16)reader["EntTypeID"];
            this.PropID = (System.Int32)reader["PropID"];
            this.Description = reader["Description"] as System.String;
        }

    }

}

