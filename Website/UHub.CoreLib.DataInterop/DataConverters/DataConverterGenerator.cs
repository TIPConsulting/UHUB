





//FILE GENERATED BY A TOOL


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;


using UHub.CoreLib.DataInterop;
using UHub.CoreLib.DataInterop.Attributes;



namespace UHub.CoreLib.DataInterop
{
    ///<summary>
    ///AutoGenerated DataConverters for TableColumnInfo
    ///</summary>
    partial class TableColumnInfo
    {

        /// <summary>
        /// Convert DataRow to TableColumnInfo
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.DataInterop.TableColumnInfo(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new TableColumnInfo();
            obj.TableSchema = row.Field<System.String>("TABLE_SCHEMA");
            obj.TableName = row.Field<System.String>("TABLE_NAME");
            obj.ColumnName = row.Field<System.String>("COLUMN_NAME");
            obj.OrdinalPosition = row.Field<System.Int32>("ORDINAL_POSITION");
            obj.DataType = row.Field<System.String>("DATA_TYPE");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing TableColumnInfo instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.TableSchema = row.Field<System.String>("TABLE_SCHEMA");
            this.TableName = row.Field<System.String>("TABLE_NAME");
            this.ColumnName = row.Field<System.String>("COLUMN_NAME");
            this.OrdinalPosition = row.Field<System.Int32>("ORDINAL_POSITION");
            this.DataType = row.Field<System.String>("DATA_TYPE");
        }





        ///<summary>
        ///Convert SqlDataReader to TableColumnInfo
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.DataInterop.TableColumnInfo(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new TableColumnInfo();

            obj.TableSchema = reader["TABLE_SCHEMA"] as System.String;
            obj.TableName = reader["TABLE_NAME"] as System.String;
            obj.ColumnName = reader["COLUMN_NAME"] as System.String;
            obj.OrdinalPosition = (System.Int32)reader["ORDINAL_POSITION"];
            obj.DataType = reader["DATA_TYPE"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing TableColumnInfo instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.TableSchema = reader["TABLE_SCHEMA"] as System.String;
            this.TableName = reader["TABLE_NAME"] as System.String;
            this.ColumnName = reader["COLUMN_NAME"] as System.String;
            this.OrdinalPosition = (System.Int32)reader["ORDINAL_POSITION"];
            this.DataType = reader["DATA_TYPE"] as System.String;
        }

    }


    ///<summary>
    ///AutoGenerated DataConverters for TableRelationshipInfo
    ///</summary>
    partial class TableRelationshipInfo
    {

        /// <summary>
        /// Convert DataRow to TableRelationshipInfo
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public static explicit operator UHub.CoreLib.DataInterop.TableRelationshipInfo(DataRow row)
        {
            var columnSet = row.Table.Columns;
            var obj = new TableRelationshipInfo();
            obj.FK_Schema = row.Field<System.String>("FK_Schema");
            obj.FK_Table = row.Field<System.String>("FK_Table");
            obj.FK_Column = row.Field<System.String>("FK_Column");
            obj.PK_Schema = row.Field<System.String>("PK_Schema");
            obj.PK_Table = row.Field<System.String>("PK_Table");
            obj.PK_Column = row.Field<System.String>("PK_Column");
            obj.Constraint_Name = row.Field<System.String>("Constraint_Name");
            return obj;
        }



        /// <summary>
        /// Load DataRow into existing TableRelationshipInfo instance
        /// </summary>
        /// <param name="row">The DataRow that will be converted into an object</param>
        public override void LoadDataRow(DataRow row)
        {
            var columnSet = row.Table.Columns;
            this.FK_Schema = row.Field<System.String>("FK_Schema");
            this.FK_Table = row.Field<System.String>("FK_Table");
            this.FK_Column = row.Field<System.String>("FK_Column");
            this.PK_Schema = row.Field<System.String>("PK_Schema");
            this.PK_Table = row.Field<System.String>("PK_Table");
            this.PK_Column = row.Field<System.String>("PK_Column");
            this.Constraint_Name = row.Field<System.String>("Constraint_Name");
        }





        ///<summary>
        ///Convert SqlDataReader to TableRelationshipInfo
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public static explicit operator UHub.CoreLib.DataInterop.TableRelationshipInfo(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;
            var obj = new TableRelationshipInfo();

            obj.FK_Schema = reader["FK_Schema"] as System.String;
            obj.FK_Table = reader["FK_Table"] as System.String;
            obj.FK_Column = reader["FK_Column"] as System.String;
            obj.PK_Schema = reader["PK_Schema"] as System.String;
            obj.PK_Table = reader["PK_Table"] as System.String;
            obj.PK_Column = reader["PK_Column"] as System.String;
            obj.Constraint_Name = reader["Constraint_Name"] as System.String; return obj;
        }



        ///<summary>
        ///Load SqlDataReader into existing TableRelationshipInfo instance
        ///</summary>
        /// <param name="reader">The SqlDataReader that is streaming the dataset to be converted.  With convert the row at the current iterator position</param>
        public override void LoadDataReader(SqlDataReader reader)
        {
            var columnSet = reader.GetSchemaTable().Columns;

            this.FK_Schema = reader["FK_Schema"] as System.String;
            this.FK_Table = reader["FK_Table"] as System.String;
            this.FK_Column = reader["FK_Column"] as System.String;
            this.PK_Schema = reader["PK_Schema"] as System.String;
            this.PK_Table = reader["PK_Table"] as System.String;
            this.PK_Column = reader["PK_Column"] as System.String;
            this.Constraint_Name = reader["Constraint_Name"] as System.String;
        }

    }

}

